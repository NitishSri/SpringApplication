pipeline {
   agent any
   stages {
      stage('Checkout') {
         steps {
             echo 'Checout Build'
             checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/NitishSri/SpringApplication']]])
             
         }
      }
      
	   stage('Create jar') {
         steps {
	        bat """
				cd Docker
				mvn clean install -DskipTests=true
         """.stripIndent().trim() 
         }
      }
      
	  
       stage('Run Test Case') {
         steps {
             script { 
             try{
                echo 'Build'
                bat """
					def build = manager.build
                    cd Docker
                    mvn test
            """.stripIndent().trim() 
             }catch(err){
                  step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                 if (currentBuild.result == 'UNSTABLE' && ((currentBuild.rawBuild.getAction(hudson.tasks.junit.TestResultAction.class).getFailCount() / currentBuild.rawBuild.getAction(hudson.tasks.junit.TestResultAction.class).getTotalCount()) * 100 ) > 50)
                    {		
						  currentBuild.result = 'FAILURE'
						  throw err 		  
                    }
                 }
             }
         }  
      }
      
      stage('code coverage') {
     steps {
        junit '**/target/surefire-reports/TEST-*.xml'
        step( [ $class: 'JacocoPublisher' ] )
     }
}
        
      stage('Creating docker image') {
         steps {
	        bat """
            cd Docker
            docker build --no-cache -t nitish91sri/testdockerapp:latest .
         """.stripIndent().trim() 
         }
      }
	  
	    stage('Run image in Docker') {
         steps {
	        bat """
				docker stop dockerapp
				docker rm dockerapp
				docker run --name dockerapp -p 8069:8069 nitish91sri/testdockerapp:latest
         """.stripIndent().trim() 
         }
      }
   }
}